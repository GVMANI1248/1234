import React, {useState, useEffect} from 'react'
import Header from '../Header'
import CongratsPage from '../CongratsPage'
import Loader from 'react-loader-spinner'
import {IoMdCheckmarkCircleOutline} from 'react-icons/io'
import {FaRegTimesCircle} from 'react-icons/fa'
import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'
import './index.css'

const Quiz = () => {
  const [questionsData, setQuestionsData] = useState([])
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [chosenOption, setChosenOption] = useState('')
  const [isCorrect, setIsCorrect] = useState(null)
  const [showCorrectOption, setShowCorrectOption] = useState(false)
  const [timeLeft, setTimeLeft] = useState(15)
  const [timerRunning, setTimerRunning] = useState(false)
  const [showCongrats, setShowCongrats] = useState(false)
  const [correctAnswers, setCorrectAnswers] = useState(0)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const response = await fetch('https://apis.ccbp.in/assess/questions')
        if (!response.ok) {
          throw new Error('Failed to fetch questions')
        }
        const data = await response.json()
        setQuestionsData(data.questions)
        setLoading(false)
        startTimer()
      } catch (error) {
        console.error(error)
        // Handle error gracefully, maybe display a message to the user
      }
    }
    fetchQuestions()
  }, [])

  useEffect(() => {
    if (timerRunning) {
      const timer = setInterval(() => {
        setTimeLeft(prevTime => {
          if (prevTime === 0) {
            clearInterval(timer)
            handleNextQuestion()
            return 15
          }
          return prevTime - 1
        })
      }, 1000)

      return () => clearInterval(timer)
    }
  }, [timerRunning, currentQuestionIndex])

  const startTimer = () => {
    setTimeLeft(15)
    setTimerRunning(true)
  }

  const handleNextQuestion = () => {
    if (currentQuestionIndex === questionsData.length - 1) {
      setShowCongrats(true)
      return
    }

    setCurrentQuestionIndex(prevIndex => prevIndex + 1)
    setChosenOption('')
    setIsCorrect(null)
    setShowCorrectOption(false)
    startTimer()
  }

  const checkAnswer = optionId => {
    const currentQuestion = questionsData[currentQuestionIndex]
    const correctOption = currentQuestion.options.find(
      option => option.is_correct === 'true',
    )
    if (correctOption.id === optionId) {
      setIsCorrect(true)
      setCorrectAnswers(prevCorrectAnswers => prevCorrectAnswers + 1)
    } else {
      setIsCorrect(false)
      setShowCorrectOption(true)
    }
    setChosenOption(optionId)
    setTimerRunning(false)
  }

  const renderOptions = (options, optionsType) => {
    switch (optionsType) {
      case 'DEFAULT':
        return (
          <ul>
            {options.map(option => (
              <li key={option.id}>
                <button
                  className={`
                  ${chosenOption === option.id && 'chosen'} 
                  ${
                    showCorrectOption &&
                    option.is_correct === 'true' &&
                    'correct'
                  }
                  ${
                    showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' &&
                    'wrong'
                  }
                `}
                  onClick={() => checkAnswer(option.id)}
                >
                  {option.text}
                  {showCorrectOption && option.is_correct === 'true' && (
                    <IoMdCheckmarkCircleOutline className="icon correct" />
                  )}
                  {showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' && (
                      <FaRegTimesCircle className="icon wrong" />
                    )}
                </button>
              </li>
            ))}
          </ul>
        )
      case 'IMAGE':
        return (
          <ul>
            {options.map(option => (
              <li key={option.id}>
                <button
                  className={`
                  ${chosenOption === option.id && 'chosen'} 
                  ${
                    showCorrectOption &&
                    option.is_correct === 'true' &&
                    'correct'
                  }
                  ${
                    showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' &&
                    'wrong'
                  }
                `}
                  onClick={() => checkAnswer(option.id)}
                >
                  <img src={option.image_url} alt={option.text} />
                  {showCorrectOption && option.is_correct === 'true' && (
                    <IoMdCheckmarkCircleOutline className="icon correct" />
                  )}
                  {showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' && (
                      <FaRegTimesCircle className="icon wrong" />
                    )}
                </button>
              </li>
            ))}
          </ul>
        )
      case 'SINGLE_SELECT':
        return (
          <ul>
            {options.map(option => (
              <li key={option.id}>
                <input
                  type="radio"
                  id={option.id}
                  name="single-select-option"
                  checked={chosenOption === option.id}
                  onChange={() => {}}
                />
                <label
                  className={`
                  ${
                    showCorrectOption &&
                    option.is_correct === 'true' &&
                    chosenOption === option.id &&
                    'correct'
                  }
                  ${
                    showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' &&
                    'wrong'
                  }
                `}
                  htmlFor={option.id}
                >
                  {option.text}
                  {showCorrectOption && option.is_correct === 'true' && (
                    <IoMdCheckmarkCircleOutline className="icon correct" />
                  )}
                  {showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' && (
                      <FaRegTimesCircle className="icon wrong" />
                    )}
                </label>
              </li>
            ))}
          </ul>
        )
      default:
        return null
    }
  }

  return (
    <>
      <Header />
      <div className="quiz-container">
        {loading ? (
          <Loader
            data-testid="loader"
            type="TailSpin"
            color="#00BFFF"
            height={50}
            width={50}
          />
        ) : showCongrats ? (
          <CongratsPage
            correctAnswers={correctAnswers}
            totalQuestions={questionsData.length}
            percentage={(correctAnswers / questionsData.length) * 100}
          />
        ) : (
          <>
            <div className="timer-and-index-container">
              <div className="index-container">
                <p>Question</p>
                <p className="current-total-question-index">
                  {currentQuestionIndex + 1}/{questionsData.length}
                </p>
              </div>
              <p className="time-container">{timeLeft}</p>
            </div>
            <div className="question">
              {questionsData.length > 0 && (
                <div className="question-container">
                  <p>{questionsData[currentQuestionIndex].question_text}</p>
                  <div>
                    {renderOptions(
                      questionsData[currentQuestionIndex].options,
                      questionsData[currentQuestionIndex].options_type,
                    )}
                  </div>
                </div>
              )}
            </div>
            <button onClick={handleNextQuestion} disabled={chosenOption === ''}>
              Next Question
            </button>
          </>
        )}
      </div>
    </>
  )
}

export default Quiz

@@@@
import React, { useState, useEffect } from 'react';
import Header from '../Header';
import CongratsPage from '../CongratsPage';
import Loader from 'react-loader-spinner';
import { IoMdCheckmarkCircleOutline } from 'react-icons/io';
import { FaRegTimesCircle } from 'react-icons/fa';
import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';
import './index.css';

const Quiz = () => {
  const [questionsData, setQuestionsData] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [chosenOption, setChosenOption] = useState('');
  const [isCorrect, setIsCorrect] = useState(null);
  const [showCorrectOption, setShowCorrectOption] = useState(false);
  const [timeLeft, setTimeLeft] = useState(15);
  const [timerRunning, setTimerRunning] = useState(false);
  const [showCongrats, setShowCongrats] = useState(false);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const response = await fetch('https://apis.ccbp.in/assess/questions');
        if (!response.ok) {
          throw new Error('Failed to fetch questions');
        }
        const data = await response.json();
        setQuestionsData(data.questions);
        setLoading(false);
        startTimer();
      } catch (error) {
        console.error(error);
      }
    };
    fetchQuestions();
  }, []);

  useEffect(() => {
    if (timerRunning) {
      const timer = setInterval(() => {
        setTimeLeft(prevTime => {
          if (prevTime === 0) {
            clearInterval(timer);
            handleNextQuestion();
            return 15;
          }
          return prevTime - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [timerRunning, currentQuestionIndex]);

  const startTimer = () => {
    setTimeLeft(15);
    setTimerRunning(true);
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex === questionsData.length - 1) {
      setShowCongrats(true);
      return;
    }

    setCurrentQuestionIndex(prevIndex => prevIndex + 1);
    setChosenOption('');
    setIsCorrect(null);
    setShowCorrectOption(false);
    startTimer();
  };

  const checkAnswer = optionId => {
    const currentQuestion = questionsData[currentQuestionIndex];
    const correctOption = currentQuestion.options.find(option => option.is_correct === 'true');
    if (correctOption.id === optionId) {
      setIsCorrect(true);
    } else {
      setIsCorrect(false);
      setShowCorrectOption(true);
    }
    setChosenOption(optionId);
    setTimerRunning(false);
  };

  const renderOptions = (options, optionsType) => {
    switch (optionsType) {
      case 'DEFAULT':
        return (
          <ul>
            {options.map(option => (
              <li key={option.id}>
                <button
                  className={`
                    ${chosenOption === option.id && 'chosen'} 
                    ${showCorrectOption && option.is_correct === 'true' && 'correct'}
                    ${showCorrectOption && option.id === chosenOption && option.is_correct !== 'true' && 'wrong'}
                  `}
                  onClick={() => checkAnswer(option.id)}
                >
                  {option.text}
                  {showCorrectOption && option.is_correct === 'true' && <IoMdCheckmarkCircleOutline className="icon correct" />}
                  {showCorrectOption && option.id === chosenOption && option.is_correct !== 'true' && <FaRegTimesCircle className="icon wrong" />}
                </button>
              </li>
            ))}
          </ul>
        );
      case 'IMAGE':
      case 'SINGLE_SELECT':
        return (
          <ul>
            {options.map(option => (
              <li key={option.id}>
                {optionsType === 'IMAGE' ? (
                  <button
                    className={`${chosenOption === option.id && 'chosen'} ${showCorrectOption && option.is_correct === 'true' && 'correct'} ${showCorrectOption && option.id === chosenOption && option.is_correct !== 'true' && 'wrong'}`}
                    onClick={() => checkAnswer(option.id)}
                  >
                    <img src={option.image_url} alt={option.text} />
                    {showCorrectOption && option.is_correct === 'true' && <IoMdCheckmarkCircleOutline className="icon correct" />}
                    {showCorrectOption && option.id === chosenOption && option.is_correct !== 'true' && <FaRegTimesCircle className="icon wrong" />}
                  </button>
                ) : (
                  <>
                    <input
                      type="radio"
                      id={option.id}
                      name="single-select-option"
                      checked={chosenOption === option.id}
                      onChange={() => {}}
                    />
                    <label htmlFor={option.id}>{option.text}</label>
                  </>
                )}
              </li>
            ))}
          </ul>
        );
      default:
        return null;
    }
  };

  return (
    <>
      <Header />
      <div className="quiz-container">
        {loading ? (
          <Loader
            testid="loader"
            type="TailSpin"
            color="#00BFFF"
            height={50}
            width={50}
          />
        ) : showCongrats ? (
          <CongratsPage
            correctAnswers={correctAnswers}
            totalQuestions={questionsData.length}
          />
        ) : (
          <>
            <div className="timer-and-index-container">
              <div className="index-container">
                <p>Question</p>
                <p className="current-total-question-index">
                  {currentQuestionIndex + 1}/{questionsData.length}
                </p>
              </div>
              <p className="time-container">{timeLeft}</p>
            </div>
            <div className="question">
              {questionsData.length > 0 && (
                <div className="question-container">
                  <p>{questionsData[currentQuestionIndex].question_text}</p>
                  <div>{renderOptions(questionsData[currentQuestionIndex].options, questionsData[currentQuestionIndex].options_type)}</div>
                </div>
              )}
            </div>
            <button onClick={handleNextQuestion} disabled={chosenOption === ''}>
              Next Question
            </button>
          </>
        )}
      </div>
    </>
  );
};

export default Quiz;

//////
import React, { useState, useEffect } from 'react';
import Header from '../Header';
import { IoMdCheckmarkCircleOutline } from 'react-icons/io';
import { FaRegTimesCircle } from 'react-icons/fa';
import './index.css';

const Quiz = () => {
  const [questionsData, setQuestionsData] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [chosenOption, setChosenOption] = useState('');
  const [isCorrect, setIsCorrect] = useState(null);
  const [showCorrectOption, setShowCorrectOption] = useState(false);
  const [timeLeft, setTimeLeft] = useState(15);
  const [timerRunning, setTimerRunning] = useState(false);

  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const response = await fetch('https://apis.ccbp.in/assess/questions');
        if (!response.ok) {
          throw new Error('Failed to fetch questions');
        }
        const data = await response.json();
        setQuestionsData(data.questions);
        startTimer(); // Start timer once questions are fetched
      } catch (error) {
        console.error(error);
        // Handle error - display error message or retry button
      }
    };
    fetchQuestions();
  }, []);

  useEffect(() => {
    if (timerRunning) {
      const timer = setInterval(() => {
        setTimeLeft(prevTime => {
          if (prevTime === 0) {
            clearInterval(timer);
            handleNextQuestion(); // Move to next question when time runs out
            return 15; // Reset time for the next question
          }
          return prevTime - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [timerRunning, currentQuestionIndex]);

  const startTimer = () => {
    setTimeLeft(15); // Reset time for each question
    setTimerRunning(true);
  };

  const handleNextQuestion = () => {
    setCurrentQuestionIndex(prevIndex => prevIndex + 1);
    setChosenOption('');
    setIsCorrect(null);
    setShowCorrectOption(false);
    startTimer(); // Start timer for the next question
  };

  const checkAnswer = optionId => {
    const currentQuestion = questionsData[currentQuestionIndex];
    const correctOption = currentQuestion.options.find(
      option => option.is_correct === 'true',
    );
    if (correctOption.id === optionId) {
      setIsCorrect(true);
    } else {
      setIsCorrect(false);
      setShowCorrectOption(true);
    }
    setChosenOption(optionId);
    setTimerRunning(false); // Stop the timer when an answer is chosen
  };

  const renderOptions = (options, optionsType) => {
    return (
      <ol type="A">
        {options.map(option => {
          const isChosen = option.id === chosenOption;
          const isCorrectOption = option.is_correct === 'true';
          const isSelectedCorrect = isChosen && isCorrectOption;
          const isSelectedWrong = isChosen && !isCorrectOption;
          const showRightIcon = isCorrectOption && (isSelectedCorrect || showCorrectOption);
          const showWrongIcon = !isCorrectOption && isSelectedWrong;

          let optionClass = '';
          if (isChosen) {
            optionClass = isSelectedCorrect ? 'chosen correct' : 'chosen wrong';
            if (!isCorrect && showCorrectOption) {
              optionClass += ' show-correct-option';
            }
          }

          return (
            <li
              key={option.id}
              className={`option-container ${optionClass}`}
              onClick={() => checkAnswer(option.id)}
            >
              {option.text}
              {showRightIcon && <IoMdCheckmarkCircleOutline className="icon correct" />}
              {showWrongIcon && <FaRegTimesCircle className="icon wrong" />}
            </li>
          );
        })}
      </ol>
    );
  };

  const renderQuestion = (question, index) => {
    const { id, question_text, options, options_type } = question;
    return (
      <div key={id} className="question-container">
        <h2>Question {index + 1}</h2>
        <p>{question_text}</p>
        <div>{renderOptions(options, options_type)}</div>
        <p>Time Left: {timeLeft}s</p> {/* Display time left for the current question */}
      </div>
    );
  };

  const totalQuestions = questionsData.length;

  return (
    <>
      <Header />
      <div className="quiz-container">
        <p>
          {currentQuestionIndex + 1}/{totalQuestions}
        </p>
        <div className="question">
          {questionsData.length > 0 &&
            renderQuestion(
              questionsData[currentQuestionIndex],
              currentQuestionIndex,
            )}
        </div>
        <button onClick={handleNextQuestion} disabled={chosenOption === ''}>
          Next Question
        </button>
      </div>
    </>
  );
};

export default Quiz;


code 2:

import React, {useState, useEffect} from 'react'
import Header from '../Header'
import {IoMdCheckmarkCircleOutline} from 'react-icons/io'
import {FaRegTimesCircle} from 'react-icons/fa'
import './index.css'

const Quiz = () => {
  const [questionsData, setQuestionsData] = useState([])
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [chosenOption, setChosenOption] = useState('')
  const [isCorrect, setIsCorrect] = useState(null)
  const [showCorrectOption, setShowCorrectOption] = useState(false)
  const [timeLeft, setTimeLeft] = useState(15)
  const [timerRunning, setTimerRunning] = useState(false)

  useEffect(() => {
    const fetchQuestions = async () => {
      try {
        const response = await fetch('https://apis.ccbp.in/assess/questions')
        if (!response.ok) {
          throw new Error('Failed to fetch questions')
        }
        const data = await response.json()
        setQuestionsData(data.questions)
        startTimer() // Start timer once questions are fetched
      } catch (error) {
        console.error(error)
        // Handle error - display error message or retry button
      }
    }
    fetchQuestions()
  }, [])

  useEffect(() => {
    if (timerRunning) {
      const timer = setInterval(() => {
        setTimeLeft(prevTime => {
          if (prevTime === 0) {
            clearInterval(timer)
            handleNextQuestion() // Move to next question when time runs out
            return 15 // Reset time for the next question
          }
          return prevTime - 1
        })
      }, 1000)

      return () => clearInterval(timer)
    }
  }, [timerRunning, currentQuestionIndex])

  const startTimer = () => {
    setTimeLeft(15) // Reset time for each question
    setTimerRunning(true)
  }

  const handleNextQuestion = () => {
    setCurrentQuestionIndex(prevIndex => prevIndex + 1)
    setChosenOption('')
    setIsCorrect(null)
    setShowCorrectOption(false)
    startTimer() // Start timer for the next question
  }

  const checkAnswer = optionId => {
    const currentQuestion = questionsData[currentQuestionIndex]
    const correctOption = currentQuestion.options.find(
      option => option.is_correct === 'true',
    )
    if (correctOption.id === optionId) {
      setIsCorrect(true)
    } else {
      setIsCorrect(false)
      setShowCorrectOption(true)
    }
    setChosenOption(optionId)
    setTimerRunning(false) // Stop the timer when an answer is chosen
  }

  const renderOptions = (options, optionsType) => {
    
    switch (optionsType) {
      case 'DEFAULT':
        return renderDefaultOptions(options)
      case 'IMAGE':
        return renderImageOptions(options)
      case 'SINGLE_SELECT':
        return renderSingleSelectOptions(options)
      default:
        return null
    }
    
  }

  const renderDefaultOptions = options => {
    return (
      <ol type="A">
        {options.map(option => (
          <li
            key={option.id}
            className={`option-container ${
              chosenOption === option.id ? 'chosen' : ''
            }`}
            onClick={() => checkAnswer(option.id)}
          >
            {option.text}
          </li>
        ))}
      </ol>
    )
  }

  const renderImageOptions = options => {
    return (
      <div>
        {options.map(option => (
          <div
            key={option.id}
            className={`option-container ${
              chosenOption === option.id ? 'chosen' : ''
            }`}
            onClick={() => checkAnswer(option.id)}
          >
            <img src={option.image_url} alt={option.text} />
          </div>
        ))}
      </div>
    )
  }

  const renderSingleSelectOptions = options => {
    return (
      <ol type="A">
        {options.map(option => (
          <li
            key={option.id}
            className={`option-container ${
              chosenOption === option.id ? 'chosen' : ''
            }`}
            onClick={() => checkAnswer(option.id)}
          >
            <input
              type="radio"
              id={option.id}
              name="single-select-option"
              checked={chosenOption === option.id}
              onChange={() => {}}
            />
            <label htmlFor={option.id}>{option.text}</label>
          </li>
        ))}
      </ol>
    )
  }

  const renderQuestion = (question, index) => {
    const {id, question_text, options, options_type} = question
    return (
      <div key={id} className="question-container">
        <p>{question_text}</p>
        <div>{renderOptions(options, options_type)}</div>

        {/* Display time left for the current question */}
      </div>
    )
  }

  const totalQuestions = questionsData.length

  return (
    <>
      <Header />
      <div className="quiz-container">
        <div className="timer-and-index-container">
          <div className="index-container">
            <p>Question</p>
            <p>
              {currentQuestionIndex + 1}/{totalQuestions}
            </p>
          </div>
          <p className="time-container">{timeLeft}</p>
        </div>
        <div className="question">
          {questionsData.length > 0 &&
            renderQuestion(
              questionsData[currentQuestionIndex],
              currentQuestionIndex,
            )}
        </div>
        <button onClick={handleNextQuestion} disabled={chosenOption === ''}>
          Next Question
        </button>
      </div>
    </>
  )
}

export default Quiz
ChatGPT
/*const renderOptions = (options, optionsType) => {
    switch (optionsType) {
      case 'DEFAULT':
        return (
        <ul>
          {options.map(option => (
            <li key={option.id}>
              <button
                className={`
                  ${chosenOption === option.id && 'chosen'} 
                  ${
                    showCorrectOption &&
                    option.is_correct === 'true' &&
                    'correct'
                  }
                  ${
                    showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' &&
                    'wrong'
                  }
                `}
                onClick={() => checkAnswer(option.id)}
              >
                {option.text}
                {chosenOption === option.id &&
                  isCorrect && (
                    <img
                      src="https://assets.ccbp.in/frontend/react-js/quiz-game-check-circle-img.png"
                      alt="correct checked circle"
                    />
                  )}
                {showCorrectOption && option.is_correct === 'true' && (
                  <img
                    src="https://assets.ccbp.in/frontend/react-js/quiz-game-check-circle-img.png"
                    alt="correct checked circle"
                  />
                )}
                {showCorrectOption &&
                  chosenOption === option.id &&
                  option.is_correct !== 'true' && (
                    <img
                      src="https://assets.ccbp.in/frontend/react-js/quiz-game-close-circle-img.png"
                      alt="incorrect close circle"
                    />
                  )}
              </button>
            </li>
          ))}
        </ul>
      );
      case 'IMAGE':
        return (
          <ul>
            {options.map(option => (
              <li key={option.id}>
                <button
                  className={`
                  ${chosenOption === option.id && 'chosen'} 
                  ${
                    showCorrectOption &&
                    option.is_correct === 'true' &&
                    'correct'
                  }
                  ${
                    showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' &&
                    'wrong'
                  }
                `}
                  onClick={() => checkAnswer(option.id)}
                >
                  <img src={option.image_url} alt={option.text} />
                  {showCorrectOption && option.is_correct === 'true' && (
                    <img
                      src="https://assets.ccbp.in/frontend/react-js/quiz-game-check-circle-img.png"
                      alt="correct checked circle"
                    />
                  )}
                  {showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' && (
                      <img
                        src="https://assets.ccbp.in/frontend/react-js/quiz-game-close-circle-img.png"
                        alt="incorrect close circle"
                      />
                    )}
                </button>
              </li>
            ))}
          </ul>
        )
      case 'SINGLE_SELECT':
        return (
          <ul>
            {options.map(option => (
              <li key={option.id}>
                <input
                  type="radio"
                  id={option.id}
                  name="single-select-option"
                  checked={chosenOption === option.id}
                  onChange={handleRadioChange} // Update the onChange handler
                />
                <label
                  className={`
                  ${
                    showCorrectOption &&
                    option.is_correct === 'true' &&
                    chosenOption === option.id &&
                    'correct'
                  }
                  ${
                    showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' &&
                    'wrong'
                  }
                `}
                  htmlFor={option.id}
                >
                  {option.text}
                  {showCorrectOption && option.is_correct === 'true' && (
                    <img
                      src="https://assets.ccbp.in/frontend/react-js/quiz-game-check-circle-img.png"
                      alt="correct checked circle"
                    />
                  )}
                  {showCorrectOption &&
                    chosenOption === option.id &&
                    option.is_correct !== 'true' && (
                      <img
                        src="https://assets.ccbp.in/frontend/react-js/quiz-game-close-circle-img.png"
                        alt="incorrect close circle"
                      />
                    )}
                </label>
              </li>
            ))}
          </ul>
        )
      default:
        return null
    }
  }*/